Oly Data Source Interface
=========================
:description: Oly data source interface
:keywords:    Oly, interface, module, libltdl, stream, metadata
:title:       Oly Data Source Inteface
:icons:
ifdef::is_standalone[]
:iconsdir:  icons
:imagesdir: images
:icons:
:toc2:
endif::is_standalone[]
ifdef::is_fossil[]
:iconsdir:  /doc/tip/doc/icons
:imagesdir: /doc/tip/doc/images
:icons:
link:/doc/tip/doc/index.wiki[Back to Home.]
endif::is_fossil[]

Functions
---------

Required functions
~~~~~~~~~~~~~~~~~~

.Must be defined
open_oly_ds_stream:: Try to connect to the data source.  If successful, open the stream from the data source.  
close_oly_ds_stream:: Flush the current stream buffers in the stream direction, stop any queries against this stream and free any pointers allocated by the stream.
+
.close_oly_ds_stream definition
[source,c]
----
OlyStatus close_oly_ds_stream(OlyDataSource *ds);
----
+
get_oly_ds_metadata:: Retrieve metadata at granularity specified.  Will go into greater detail once this is more firmly defined.  Must be thread-safe.
+
.get_oly_ds_metadata definition
[source,c]
----
OlyStatus get_oly_ds_metadata(OlyDataSource *ds);
----
+
get_oly_ds_error_message:: See <<_open_questions,open questions>>.

.Not sure about these
flush_oly_ds_buffer:: Should this be necessary?  Probably, eh?  Oly needs to have control over the stream on a direct level, but should that be part of closing?  Also, what about direction?  Is this for output only?
fill_oly_ds_buffer:: Same thing.  Needed?  Wanted?  How should this work?
get_oly_ds_error_number:: See <<_open_questions,open questions>>.


Open Questions
~~~~~~~~~~~~~~

. Should error numbers be defined by Oly or by the data source?  I think Oly.
. However, there will be data source errors that Oly cannot predict.  Thus, "get_oly_ds_error_message" should return those.

Data Stream
-----------

. The stream will use the Oly data source conversion functions to get the data into a state friendly to Oly.  
. Stream direction must be in or out.  To use one data source in both directions, open two streams.
. Stream will checkpoint in a way that makes sense.  This depends on whether it is writing to a table or a document type data source.
. Stream will use data source's native functionality to ensure whatever data was written is atomic.
. Oly will recover to last checkpoint in the event of a sudden stop.


Structures
----------

Collection-centered data
~~~~~~~~~~~~~~~~~~~~~~~~
As of 3-19-2013, Oly's collection-centered data processing is not concerned about type.  This may change in the future.

Collection
^^^^^^^^^^
A collection holds tuples or keys, each of which references values.  At a macro level, collection-centered data will be a collection of tuples, keys, collections and values.

Tuple
^^^^^
A numeric identifier for a value.  If the source data actually has values for these, Oly will try to preserve them.  If no values are available, then oly will assign ascending tuples within a single collection.  Within a collection, tuples must be unique; a non-unique tuple in a collection must be handled by Oly or the data source itself.

Key
^^^
A scalar identifier for a value.  

Value
^^^^^
A collection or a scalar.

Scalar
^^^^^^
Term from http://www.yaml.org/spec/1.2/spec.html#scalar//[yaml], which defines it as " an opaque datum that can be presented as a series of zero or more Unicode characters."  Can be a key or a value.

Table-centered data
~~~~~~~~~~~~~~~~~~~

Table
^^^^^
A row and column based data storage structure.  A CSV file would be a good example.

Row
^^^
One row of a table.

Column
^^^^^^
One typed column, identifiable by either its name or its number.  If type is not provided, for now, Oly assumes the type is "text".

Metadata
~~~~~~~~
What information should be here?

. Data source direction (in or out)
. Oly data source buffer size
. Threads?
. Connection information?

Data Source -> Structure Maps
-----------------------------

ICU Resource Bundle
~~~~~~~~~~~~~~~~~~~

Resource bundle -> collection.
Key -> key
Index -> tuple
Array -> collection (with tuples only)
Table -> collection (with keys only)

// vim: set syntax=asciidoc:
